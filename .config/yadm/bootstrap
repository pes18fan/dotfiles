#!/usr/bin/env python
import os
import subprocess
import shutil


# Use the static methods to return strings in color
# Uses ANSI codes
class Color:
    @staticmethod
    def red(text: str) -> str:
        return f"\x1b[31m{str}\x1b[0m"

    @staticmethod
    def green(text: str) -> str:
        return f"\x1b[32m{str}\x1b[0m"

    @staticmethod
    def yellow(text: str) -> str:
        return f"\x1b[33m{str}\x1b[0m"


# List of all my packages that I want to bootstrap.
# Each is a tuple, with the first element being the package name in the package
# repos, and the second being the name of the executable
PACKAGES = [
    ("git", "git"),
    ("curl", "curl"),
    ("fish", "fish"),
    ("neovim", "nvim"),
    ("tmux", "tmux"),
    ("ripgrep", "rg"),
    ("fd", "fd"),
    ("eza", "eza"),
    ("bat", "bat"),
    ("fzf", "fzf"),
]

ProcError = subprocess.CalledProcessError

PKG = input("Tell me your package manager. ")
PKG_INSTALL = input(
    f"""
    What's {PKG}'s install command? E.g. pacman -S for pacman.
    {Color.red("OMIT THE sudo")}
    """
)
print(
    f"""
    What are {PKG}'s update commands? Seperate each by a newline, and type in
    {Color.yellow("done")} when you're done. For example, it could be the single
    command `pacman -Syu` for pacman or the two commands `apt update` and
    `apt upgrade` for apt.
    {Color.red("Again, omit the sudo.")}
    """
)

PKG_UPDATE = []
while True:
    while True:
        cmd = input()
        match cmd:
            case "done":
                break
            case _:
                PKG_UPDATE.append(input())

    if PKG_UPDATE.__len__() == 0:
        print("Please provide at least one update command!")


def update_pkgs():
    for cmd in PKG_UPDATE:
        try:
            subprocess.run(("sudo" + " " + cmd).split(), check=True)
        except ProcError as e:
            print(f"Failed to update packages: {e}")
            exit(1)


def try_install(package_name: str, executable: str):
    if shutil.which(executable) is not None:
        print(f"{package_name} is installed. Skipping...")
    else:
        print(f"No {package_name}. Installing...")
        try:
            subprocess.run(f"sudo {PKG_INSTALL} {package_name}".split(), check=True)
        except ProcError as e:
            print(Color.red(f"Failed to install {package_name}.: {e}."))
            print(
                f"""
                This may be due to the name of {package_name} being different in
                {PKG}'s repository."""
            )
            print(
                f"""
                If that is the case, please enter the name of the package in
                {PKG}, else enter 1 to skip this package or enter 0 to exit and
                try to install it manually.
                """
            )
            new_name = input()

            match new_name:
                case "1":
                    print(f"Skipping {package_name}...")
                case "0":
                    print("Exiting...")
                    exit(1)
                case _:
                    try_install(new_name, executable)


def change_shell():
    if "fish" in os.environ["SHELL"]:
        print("fish is already the default shell.")
    else:
        print("Changing default shell to fish...")
        try:
            subprocess.run(["chsh", "-s", "$(which fish)"], check=True)
        except ProcError as e:
            print(Color.red(f"Failed to change shell.: {e}"))


def main():
    print("\x1b[33m------------------ BOOTSTRAPPER ------------------\x1b[0m\n\n")

    print("Updating packages.")
    update_pkgs()

    print()
    print("Installing packages...")

    for package_name, executable in PACKAGES:
        print()
        try_install(package_name, executable)

    print()
    print(Color.yellow("Installing starship and zoxide..."))

    starship_script = "starship_install.sh"
    zoxide_script = "zoxide_install.sh"

    # starship.rs
    if True:
        try:
            subprocess.run(
                f"curl https://starship.rs/install.sh -o {starship_script}".split(),
                check=True,
            )
            # starship prefers sh to bash
            subprocess.run(f"sh {starship_script}".split(), check=True)
        except ProcError as e:
            print(Color.red(f"Failed to install starship.: {e}"))
            exit(1)

    # zoxide
    if True:
        try:
            subprocess.run(
                f"curl https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh -o {zoxide_script}".split(),
                check=True,
            )
            subprocess.run(f"bash {zoxide_script}".split(), check=True)
        except ProcError as e:
            print(Color.red(f"\x1b[31mFailed to install zoxide.\x1b[0m: {e}"))
            exit(1)

    os.remove(starship_script)
    os.remove(zoxide_script)

    print()
    # Get the tmux plugin manager
    print(Color.yellow("Getting tmux plugin manager..."))
    try:
        subprocess.run(
            "git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm".split(),
            check=True,
        )
        print(
            """
            Downloaded tmux plugin manager. Make sure to use the keybind C-s + I
            in tmux to actually install the plugins.
            """
        )
    except ProcError as e:
        print(Color.red(f"\x1b[31mFailed to get tmux plugin manager: {e}"))
        exit(1)

    print()
    change_shell()
    print()

    print("Bootstrapping complete.")
    print("Make sure to install a NerdFont for the best experience.")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        exit(1)
