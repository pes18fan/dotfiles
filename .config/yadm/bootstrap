#!/usr/bin/env python
import configparser
import platform
import os
import subprocess
import shutil
import urllib

ProcError = subprocess.CalledProcessError

PKG = input("Tell me your package manager.")
PKG_INSTALL = input(f"What's {PKG}'s install command? E.g. pacman -S for pacman.")
PKG_UPDATE = input(
    """What's $PKG's update command? E.g pacman -Syu for pacman. If there
    is more than one command, for example in Ubuntu, connect them with && in the
    answer."""
)


def try_install(package_name: str, executable: str):
    if shutil.which(executable) is not None:
        print(f"{package_name} is installed. Skipping...")
    else:
        print(f"No {package_name}. Installing...")
        try:
            subprocess.run(f"sudo {PKG_INSTALL} {package_name}".split(), check=True)
        except ProcError as e:
            print(f"\x1b[31mFailed to install {package_name}.\x1b[0m: {e}.")
            print(
                f"""This may be due to the name of {package_name} being different in
                    {PKG}'s repository."""
            )
            print(
                f"""If that is the case, please enter the name of the package in
                  {PKG}, else enter 1 to skip this package or enter 0 to exit and
                  try to install it manually."""
            )
            pkg_name = input().strip()

            match pkg_name:
                case "1":
                    print(f"Skipping {package_name}...")
                case "0":
                    print("Exiting...")
                    exit(1)
                case _:
                    try_install(package_name, executable)


def change_shell():
    if "fish" in os.environ["SHELL"]:
        print("fish is already the default shell.")
    else:
        print("Changing default shell to fish...")
        try:
            subprocess.run(["chsh", "-s", "$(which fish)"], check=True)
        except ProcError as e:
            print(f"\x1b[31mFailed to change shell.\x1b[0m: {e}")


# This assumes that `str` is a path in the C: drive
def convert_windows_path_to_wsl(path: str) -> str:
    return path.replace("\\", "/").replace("C:", "/mnt/c")


def main():
    print("\x1b[33m------------------ BOOTSTRAPPER ------------------\x1b[0m\n\n")

    print("Updating packages.")
    try:
        subprocess.run(f"sudo {PKG_UPDATE}".split(), check=True)
    except ProcError as e:
        print(f"Failed to update packages: {e}")
        exit(1)

    v = platform.uname().release
    if v.endswith("-Microsoft") or v.endswith("microsoft-standard-WSL2"):
        print("Performing Windows-specific tasks...")

        # Get the %USERPROFILE% environment variable in Windows
        wd = os.getcwd()
        os.chdir("/mnt/c")
        windows_userprofile = subprocess.run(
            "cmd.exe /c echo %USERPROFILE%".split(),
            check=True,
            stdout=subprocess.PIPE,
        ).stdout.decode("utf-8")
        os.chdir(wd)
        userprofile = convert_windows_path_to_wsl(windows_userprofile)

        # Get the name of the current Mozilla Firefox profile and rename the
        # placeholder name "profile" in the config with its name
        mozilla_profile = os.path.join(os.getenv("APPDATA"), r"Mozilla\Firefox")
        mozilla_profile_ini = os.path.join(mozilla_profile, r"profiles.ini")
        profile = configparser.ConfigParser()
        profile.read(mozilla_profile_ini)
        profile_path = convert_windows_path_to_wsl(
            os.path.normpath(
                os.path.join(mozilla_profile, profile.get("Profile0", "Path"))
            )
        )
        os.rename(
            "./windows/AppData/Roaming/Mozilla/Firefox/Profiles/profile", profile_path
        )

        try:
            shutil.copytree(os.path("windows"), os.path(userprofile))
        except ProcError as e:
            print(f"\x1b[31mFailed to copy files to Windows.\x1b[0m: {e}")
            exit(1)

    print("Installing packages...")
    try_install("curl", "curl")
    try_install("fish", "fish")
    try_install("neovim", "nvim")
    try_install("tmux", "tmux")
    try_install("ripgrep", "rg")
    try_install("fd", "fd")
    try_install("eza", "eza")
    try_install("bat", "bat")
    try_install("fzf", "fzf")

    # starship.rs
    if True:
        starship_script = (
            urllib.request.urlopen("https://starship.rs/install.sh")
            .read()
            .decode("utf-8")
        )
        subprocess.run(["bash", "-c", starship_script])

    # zoxide
    if True:
        zoxide_script = (
            urllib.request.urlopen(
                "https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh"
            )
            .read()
            .decode("utf-8")
        )
        subprocess.run(["bash", "-c", zoxide_script])

    change_shell()

    print("Bootstrapping complete.")
    print("Make sure to install a NerdFont for the best experience.")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        exit(0)
